generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String     @id @default(uuid())
  firstName                   String     @db.VarChar(20)
  lastName                    String     @db.VarChar(20)
  email                       String     @unique(map: "email") @db.VarChar(60)
  hashPassword                String     @db.VarChar(255)
  resetPasswordToken          String?    @unique
  resetPasswordTokenExpiry    DateTime?
  updated_at                  DateTime   @default(now()) @db.Timestamp(0)
  created_at                  DateTime   @default(now()) @db.Timestamp(0)
  labels                      Label[]
  projects                    Project[]
  tasks                       Task[]
}

model Label {
  id            String   @id @default(uuid())
  userId        String
  name          String   @unique @db.VarChar(30)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  users         User     @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "labels_ibfk_1")
  tasks         TaskWithLabel[]

  @@index([userId], map: "userId")
}

model Project {
  id            String   @id @default(uuid())
  userId        String
  name          String   @db.VarChar(30)
  color         String   @default("#b8255f") @db.VarChar(9)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  users         User     @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "projects_ibfk_1")
  tasks         Task[]

  @@index([userId], map: "userId")
}

model Task {
  id            String    @id @default(uuid())
  name          String    @db.VarChar(30)
  description   String    @default("") @db.TinyText
  completed     Boolean   @default(false)
  important     Boolean   @default(false)
  dueDate       DateTime  @db.Date @default(now())
  updated_at    DateTime  @default(now()) @db.Timestamp(0)
  created_at    DateTime  @default(now()) @db.Timestamp(0)
  labels        TaskWithLabel[]
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @map("userId")
  project       Project?  @relation(fields: [projectId], references: [id])
  projectId     String?   @map("projectId")

  @@index([userId], map: "userId")
  @@index([projectId], map: "projectId")
}

model TaskWithLabel {
  id            String  @id @default(uuid())
  task          Task    @relation(fields: [taskId], references: [id])
  taskId        String
  label         Label   @relation(fields: [labelId], references: [id])
  labelId       String

  @@index([taskId], map: "taskId")
  @@index([labelId], map: "labelId")

  @@unique([taskId, labelId])
}