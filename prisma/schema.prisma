generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid())
  first_name      String     @db.VarChar(20)
  last_name       String     @db.VarChar(20)
  email           String     @unique(map: "email") @db.VarChar(60)
  hash_password   String     @db.VarChar(255)
  updated_at      DateTime   @default(now()) @db.Timestamp(0)
  created_at      DateTime   @default(now()) @db.Timestamp(0)
  labels          Label[]
  projects        Project[]
  tasks           Task[]
}

model Label {
  id            String   @id @default(uuid())
  user_id       String
  name          String   @unique @db.VarChar(30)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  users         User     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "labels_ibfk_1")
  tasks         TaskWithLabel[]

  @@index([user_id], map: "user_id")
}

model Project {
  id            String   @id @default(uuid())
  user_id       String
  name          String   @db.VarChar(30)
  color         String   @default("#b8255f") @db.VarChar(9)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  users         User     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "projects_ibfk_1")
  tasks         Task[]

  @@index([user_id], map: "user_id")
}

model Task {
  id            String    @id @default(uuid())
  name          String    @db.VarChar(30)
  description   String    @default("") @db.TinyText
  completed     Boolean   @default(false)
  important     Boolean   @default(false)
  repeat        Boolean   @default(false)
  due_date      DateTime  @db.Date @default(now())
  updated_at    DateTime  @default(now()) @db.Timestamp(0)
  created_at    DateTime  @default(now()) @db.Timestamp(0)
  labels        TaskWithLabel[]
  user          User      @relation(fields: [user_id], references: [id])
  user_id       String    @map("user_id")
  project       Project?  @relation(fields: [project_id], references: [id])
  project_id    String?   @map("project_id")

  @@index([user_id], map: "user_id")
  @@index([project_id], map: "project_id")
}

model TaskWithLabel {
  id            String  @id @default(uuid())
  task          Task    @relation(fields: [task_id], references: [id])
  task_id       String
  label         Label   @relation(fields: [label_id], references: [id])
  label_id      String

  @@index([task_id], map: "task_id")
  @@index([label_id], map: "label_id")

  @@unique([task_id, label_id])
}